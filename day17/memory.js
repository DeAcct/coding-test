// 우리가 선언한 변수나 상수는 값 그 자체가 아니라 메모리 주소를 바라보고 있다.

// 원시 자료형은 변형이 불가능하다.
let v1 = 126;
let v2 = v1;
// 따라서 값이 변경되면 새로운 메모리가 할당된다.
v1 = v1 + 1;

// 가상 머신
// Heap에는 참조 타입의 변수가 들어간다.
// Call Stack에는 원시 타입의 변수가 들어간다.
let a = 10;
const b = 20;

// arr의 원본은 Heap에 저장된다.
// arr이라는 상수는 Heap에 있는 원본의 메모리 주소를 참조하게 된다.
const arr = [];
// 참조한 것이므로 상수로 선언되었더라도 원본을 변경할 수 있다.
// Call Stack의 메모리를 변경하는 것이 아닌 Heap의 원본 메모리가 변경된다.
arr.push(5);
arr.push(3);
arr.push(1);

// 내장된 가비지 컬렉터를 통해 사용하지 않는 메모리를 해제한다.
// 닿을 수 없는 주소를 더 이상 필요없는 주소로 정의하고 지우는 알고리즘 - Mark and Sweep Algorithm
// 최상위 객체인 window(브라우저 환경의 경우)부터 시작하여 닿을 수 없는 곳은 지운다.

// 메모리에 원래 저장되어 있던 126이란 값은 더 이상 참조하는 변수가 없으므로 가비지 컬렉터가 삭제한다.
v2 = v1 + 1;
